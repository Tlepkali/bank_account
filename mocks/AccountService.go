// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "bank_account/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// AccountService is an autogenerated mock type for the AccountService type
type AccountService struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: account
func (_m *AccountService) CreateAccount(account *models.CreateAccountDTO) (string, error) {
	ret := _m.Called(account)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.CreateAccountDTO) (string, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(*models.CreateAccountDTO) string); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.CreateAccountDTO) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccount provides a mock function with given fields: accountNumber
func (_m *AccountService) DeleteAccount(accountNumber string) error {
	ret := _m.Called(accountNumber)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(accountNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountByNumber provides a mock function with given fields: accountNumber
func (_m *AccountService) GetAccountByNumber(accountNumber string) (*models.Account, error) {
	ret := _m.Called(accountNumber)

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Account, error)); ok {
		return rf(accountNumber)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Account); ok {
		r0 = rf(accountNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAccounts provides a mock function with given fields:
func (_m *AccountService) GetAllAccounts() ([]*models.Account, error) {
	ret := _m.Called()

	var r0 []*models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Account, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: account
func (_m *AccountService) UpdateAccount(account *models.Account) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAccountService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountService creates a new instance of AccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountService(t mockConstructorTestingTNewAccountService) *AccountService {
	mock := &AccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
